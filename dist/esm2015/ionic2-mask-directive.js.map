{
  "version": 3,
  "file": "ionic2-mask-directive.js",
  "sources": [
    "ng://ionic2-mask-directive/out/index.ts"
  ],
  "sourcesContent": [
    "import { Component, Pipe, PipeTransform, Directive, HostListener, Input } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n@Pipe(  {name: '[mask]'})\nexport class Ionic2MaskDirective {\n\n    @Input() mask: string;\n\n    constructor(\n        private control: NgControl\n    ) { }\n\n    /*when loading dynamically data to the input, without this\n    the mask will only work on keyup event changes */\n    @HostListener('change') ngOnChanges() {\n        let value = this.control.control.value;\n        if (value) {\n            this.control.control.setValue(this.format(value));\n        }\n    }\n\n    @HostListener('keyup', ['$event'])\n    onKeyUp($event: any) {\n        if ($event.keyCode !== 13 && $event.keyCode !== 9) {\n            let value = this.control.control.value;\n\n            this.control.control.setValue(this.format(value));\n        }\n    }\n\n    private format(v: string): string {\n        let s: string = '';\n\n        var matches = v.match(/[a-zA-Z0-9]+/g);\n        if (matches !== null) {\n            let value = matches.join('').split('');\n\n            var chars = this.mask.split('');\n            for (let c of chars) {\n                if (value.length === 0) {\n                    break;\n                }\n\n                switch (c) {\n                    case '#':\n                        s += value[0];\n                        value = value.slice(1);\n                        break;\n\n                    case '9':\n                        if (value[0].match(/\\d/) !== null) {\n                            s += value[0];\n                            value = value.slice(1);\n                        }\n                        break;\n\n                    case 'A':\n                        if (value[0].match(/[a-zA-Z]/) !== null) {\n                            s += value[0];\n                            value = value.slice(1);\n                        }\n                        break;\n\n                    default:\n                        s += c;\n                }\n            }\n        }\n\n        return s;\n    }\n\n}\n"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,AAIA,MAAA,mBAAA,CAAA;;;;IAII,WAAJ,CACgB,OADhB,EAAA;QACgB,IAAhB,CAAA,OAAuB,GAAP,OAAO,CAAvB;KACS;;;;IAImB,WAAW,GAAvC;QACQ,qBAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;QACvC,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACrD;;;;;;IAIL,OAAO,CAAC,MAAW,EAAvB;QACQ,IAAI,MAAM,CAAC,OAAO,KAAK,EAAE,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,EAAE;YAC/C,qBAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;YAEvC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACrD;;;;;;IAGG,MAAM,CAAC,CAAS,EAA5B;QACQ,qBAAI,CAAC,GAAW,EAAE,CAAC;QAEnB,qBAAI,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QACvC,IAAI,OAAO,KAAK,IAAI,EAAE;YAClB,qBAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAEvC,qBAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAChC,KAAK,qBAAI,CAAC,IAAI,KAAK,EAAE;gBACjB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACpB,MAAM;iBACT;gBAED,QAAQ,CAAC;oBACL,KAAK,GAAG;wBACJ,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;wBACd,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACvB,MAAM;oBAEV,KAAK,GAAG;wBACJ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;4BAC/B,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;4BACd,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;yBAC1B;wBACD,MAAM;oBAEV,KAAK,GAAG;wBACJ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;4BACrC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;4BACd,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;yBAC1B;wBACD,MAAM;oBAEV;wBACI,CAAC,IAAI,CAAC,CAAC;iBACd;aACJ;SACJ;QAED,OAAO,CAAC,CAAC;;;;IAlEjB,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAQ,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAxB,EAAA;;;;IAFA,EAAA,IAAA,EAAS,SAAS,GAAlB;;;IAKA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAK,KAAK,EAAV,EAAA;IAQA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAK,YAAY,EAAjB,IAAA,EAAA,CAAkB,QAAQ,EAA1B,EAAA,EAAA;IAOA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAK,YAAY,EAAjB,IAAA,EAAA,CAAkB,OAAO,EAAE,CAAC,QAAQ,CAAC,EAArC,EAAA,EAAA;;;;;;;;;;;;;"
}
